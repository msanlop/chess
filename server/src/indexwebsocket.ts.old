import {server as WebSocketServer} from 'websocket';
import * as http from 'http';
import { resolveProjectReferencePath } from 'typescript';
// import './Chess/Chess'
// var http = require('http')

const PORT = 8080

const players = new Map();

const server = http.createServer((req, res) => {
    console.log(new Date(), '- received request for ', req.url)
    res.writeHead(404)
    res.end()
})


server.listen(PORT, () => console.log(new Date(), '- server is listening on port ', PORT))


const wsServer = new WebSocketServer({
    httpServer: server,
    autoAcceptConnections: false
})

const originIsAllowed = (origin: string) => {
    //TODO: never like this in production    
    return true;
}

wsServer.on('connect', conn => {
    console.log(new Date(), '-  new connnection : ', conn);
    // if(players.get('w')){
    //     players.set('w', conn)
    // }
    conn.sendUTF('new connection')
})

wsServer.on('request', req => {
    if(!originIsAllowed(req.origin)) {
        req.reject();
        console.log(new Date(), '- refused connection from ', req.origin);
        return;
    }

    const connection = req.accept('echo-protocol', req.origin)

    connection.on('message', msg => {
        if(msg.type === 'utf8') {
            if (msg.utf8Data.startsWith('gameupdate$')) {
                const state = handlerGameupdate(msg.utf8Data.slice('gameupdate$'.length))
                console.log('new gameupdate : ');
                console.log(state);
                console.log(typeof(state));
                
            } else {
                console.log('received message: ', msg.utf8Data);
            }
            connection.sendUTF(msg.utf8Data)
        }
        else if (msg.type === 'binary') {
            console.log('received binary message of ', msg.binaryData.length, ' bytes');
            connection.sendBytes(msg.binaryData)
        }
    })


    connection.on('close', (reasonCode, description) => 
        console.log(new Date(), ' peer ', connection.remoteAddress, ' disconnected'))


})


const handlerGameupdate = (string:string) => console.log(JSON.parse(string));
